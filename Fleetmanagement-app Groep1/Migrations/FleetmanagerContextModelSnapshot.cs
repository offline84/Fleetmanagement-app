// <auto-generated />
using System;
using Fleetmanagement_app_Groep1.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fleetmanagement_app_Groep1.Migrations
{
    [DbContext(typeof(FleetmanagerContext))]
    partial class FleetmanagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Fleetmanagement_app_Groep1.Entities.Bestuurder", b =>
                {
                    b.Property<string>("Rijksregisternummer")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Achternaam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("GeboorteDatum")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsGearchiveerd")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LaatstGeupdate")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Rijksregisternummer");

                    b.ToTable("Bestuurder");
                });

            modelBuilder.Entity("Fleetmanagement_app_Groep1.Entities.Brandstof", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeBrandstof")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Brandstoffen");
                });

            modelBuilder.Entity("Fleetmanagement_app_Groep1.Entities.Categorie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeWagen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categorie");
                });

            modelBuilder.Entity("Fleetmanagement_app_Groep1.Entities.Koppeling", b =>
                {
                    b.Property<Guid>("KoppelingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Chassisnummer")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Kaartnummer")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Rijksregisternummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("KoppelingsId");

                    b.HasIndex("Chassisnummer")
                        .IsUnique()
                        .HasFilter("[Chassisnummer] IS NOT NULL");

                    b.HasIndex("Kaartnummer")
                        .IsUnique()
                        .HasFilter("[Kaartnummer] IS NOT NULL");

                    b.HasIndex("Rijksregisternummer")
                        .IsUnique();

                    b.ToTable("Koppeling");
                });

            modelBuilder.Entity("Fleetmanagement_app_Groep1.Entities.Rijbewijs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeRijbewijs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rijbewijs");
                });

            modelBuilder.Entity("Fleetmanagement_app_Groep1.Entities.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Staat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("Fleetmanagement_app_Groep1.Entities.Tankkaart", b =>
                {
                    b.Property<string>("Kaartnummer")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("GeldigheidsDatum")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("date");

                    b.Property<bool>("IsGearchiveerd")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGeblokkeerd")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LaatstGeupdate")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<int>("Pincode")
                        .HasMaxLength(8)
                        .HasColumnType("int");

                    b.HasKey("Kaartnummer");

                    b.ToTable("Tankkaarten");
                });

            modelBuilder.Entity("Fleetmanagement_app_Groep1.Entities.ToewijzingBrandstofTankkaart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandstofId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tankkaartnummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BrandstofId");

                    b.HasIndex("Tankkaartnummer");

                    b.ToTable("Toewijzingen_Brandstof_Tankkaart");
                });

            modelBuilder.Entity("Fleetmanagement_app_Groep1.Entities.ToewijzingRijbewijsBestuurder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RijbewijsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Rijksregisternummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Id");

                    b.HasIndex("RijbewijsId");

                    b.HasIndex("Rijksregisternummer");

                    b.ToTable("Toewijzingen_Rijbewijs_Bestuurder");
                });

            modelBuilder.Entity("Fleetmanagement_app_Groep1.Entities.Voertuig", b =>
                {
                    b.Property<string>("Chassisnummer")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AantalDeuren")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<int>("Bouwjaar")
                        .HasColumnType("int");

                    b.Property<Guid>("BrandstofId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategorieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsGearchiveerd")
                        .HasColumnType("bit");

                    b.Property<string>("Kleur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LaatstGeupdate")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("Merk")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nummerplaat")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Chassisnummer");

                    b.HasIndex("BrandstofId");

                    b.HasIndex("CategorieId");

                    b.HasIndex("StatusId");

                    b.ToTable("Voertuigen");
                });

            modelBuilder.Entity("Fleetmanagement_app_Groep1.Entities.Bestuurder", b =>
                {
                    b.OwnsOne("Fleetmanagement_app_Groep1.Entities.Adres", "Adres", b1 =>
                        {
                            b1.Property<string>("BestuurderRijksregisternummer")
                                .HasColumnType("nvarchar(11)");

                            b1.Property<int>("Huisnummer")
                                .HasColumnType("int");

                            b1.Property<int>("Postcode")
                                .HasMaxLength(50)
                                .HasColumnType("int");

                            b1.Property<string>("Stad")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Straat")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("BestuurderRijksregisternummer");

                            b1.ToTable("Bestuurder");

                            b1.WithOwner("Bestuurder")
                                .HasForeignKey("BestuurderRijksregisternummer");

                            b1.Navigation("Bestuurder");
                        });

                    b.Navigation("Adres");
                });

            modelBuilder.Entity("Fleetmanagement_app_Groep1.Entities.Koppeling", b =>
                {
                    b.HasOne("Fleetmanagement_app_Groep1.Entities.Voertuig", "Voertuig")
                        .WithOne("Koppeling")
                        .HasForeignKey("Fleetmanagement_app_Groep1.Entities.Koppeling", "Chassisnummer");

                    b.HasOne("Fleetmanagement_app_Groep1.Entities.Tankkaart", "Tankkaart")
                        .WithOne("Koppeling")
                        .HasForeignKey("Fleetmanagement_app_Groep1.Entities.Koppeling", "Kaartnummer");

                    b.HasOne("Fleetmanagement_app_Groep1.Entities.Bestuurder", "Bestuurder")
                        .WithOne("Koppeling")
                        .HasForeignKey("Fleetmanagement_app_Groep1.Entities.Koppeling", "Rijksregisternummer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bestuurder");

                    b.Navigation("Tankkaart");

                    b.Navigation("Voertuig");
                });

            modelBuilder.Entity("Fleetmanagement_app_Groep1.Entities.ToewijzingBrandstofTankkaart", b =>
                {
                    b.HasOne("Fleetmanagement_app_Groep1.Entities.Brandstof", "Brandstof")
                        .WithMany("Toewijzingen")
                        .HasForeignKey("BrandstofId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fleetmanagement_app_Groep1.Entities.Tankkaart", "Tankkaart")
                        .WithMany("MogelijkeBrandstoffen")
                        .HasForeignKey("Tankkaartnummer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brandstof");

                    b.Navigation("Tankkaart");
                });

            modelBuilder.Entity("Fleetmanagement_app_Groep1.Entities.ToewijzingRijbewijsBestuurder", b =>
                {
                    b.HasOne("Fleetmanagement_app_Groep1.Entities.Rijbewijs", "Rijbewijs")
                        .WithMany("ToewijzingenBestuurder")
                        .HasForeignKey("RijbewijsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fleetmanagement_app_Groep1.Entities.Bestuurder", "Bestuurder")
                        .WithMany("ToewijzingenRijbewijs")
                        .HasForeignKey("Rijksregisternummer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bestuurder");

                    b.Navigation("Rijbewijs");
                });

            modelBuilder.Entity("Fleetmanagement_app_Groep1.Entities.Voertuig", b =>
                {
                    b.HasOne("Fleetmanagement_app_Groep1.Entities.Brandstof", "Brandstof")
                        .WithMany("Voertuigen")
                        .HasForeignKey("BrandstofId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fleetmanagement_app_Groep1.Entities.Categorie", "Categorie")
                        .WithMany("Voertuigen")
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fleetmanagement_app_Groep1.Entities.Status", "Status")
                        .WithMany("Voertuigen")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brandstof");

                    b.Navigation("Categorie");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Fleetmanagement_app_Groep1.Entities.Bestuurder", b =>
                {
                    b.Navigation("Koppeling");

                    b.Navigation("ToewijzingenRijbewijs");
                });

            modelBuilder.Entity("Fleetmanagement_app_Groep1.Entities.Brandstof", b =>
                {
                    b.Navigation("Toewijzingen");

                    b.Navigation("Voertuigen");
                });

            modelBuilder.Entity("Fleetmanagement_app_Groep1.Entities.Categorie", b =>
                {
                    b.Navigation("Voertuigen");
                });

            modelBuilder.Entity("Fleetmanagement_app_Groep1.Entities.Rijbewijs", b =>
                {
                    b.Navigation("ToewijzingenBestuurder");
                });

            modelBuilder.Entity("Fleetmanagement_app_Groep1.Entities.Status", b =>
                {
                    b.Navigation("Voertuigen");
                });

            modelBuilder.Entity("Fleetmanagement_app_Groep1.Entities.Tankkaart", b =>
                {
                    b.Navigation("Koppeling");

                    b.Navigation("MogelijkeBrandstoffen");
                });

            modelBuilder.Entity("Fleetmanagement_app_Groep1.Entities.Voertuig", b =>
                {
                    b.Navigation("Koppeling");
                });
#pragma warning restore 612, 618
        }
    }
}
